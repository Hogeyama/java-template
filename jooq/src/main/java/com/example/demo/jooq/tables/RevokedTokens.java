/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Keys;
import com.example.demo.jooq.Public;
import com.example.demo.jooq.tables.Users.UsersPath;
import com.example.demo.jooq.tables.records.RevokedTokensRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RevokedTokens extends TableImpl<RevokedTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.revoked_tokens</code>
     */
    public static final RevokedTokens REVOKED_TOKENS = new RevokedTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RevokedTokensRecord> getRecordType() {
        return RevokedTokensRecord.class;
    }

    /**
     * The column <code>public.revoked_tokens.id</code>.
     */
    public final TableField<RevokedTokensRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.revoked_tokens.jti</code>.
     */
    public final TableField<RevokedTokensRecord, String> JTI = createField(DSL.name("jti"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.revoked_tokens.revoked_at</code>.
     */
    public final TableField<RevokedTokensRecord, OffsetDateTime> REVOKED_AT = createField(DSL.name("revoked_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.revoked_tokens.reason</code>.
     */
    public final TableField<RevokedTokensRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.revoked_tokens.created_by_user_id</code>.
     */
    public final TableField<RevokedTokensRecord, Long> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.BIGINT, this, "");

    private RevokedTokens(Name alias, Table<RevokedTokensRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RevokedTokens(Name alias, Table<RevokedTokensRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.revoked_tokens</code> table reference
     */
    public RevokedTokens(String alias) {
        this(DSL.name(alias), REVOKED_TOKENS);
    }

    /**
     * Create an aliased <code>public.revoked_tokens</code> table reference
     */
    public RevokedTokens(Name alias) {
        this(alias, REVOKED_TOKENS);
    }

    /**
     * Create a <code>public.revoked_tokens</code> table reference
     */
    public RevokedTokens() {
        this(DSL.name("revoked_tokens"), null);
    }

    public <O extends Record> RevokedTokens(Table<O> path, ForeignKey<O, RevokedTokensRecord> childPath, InverseForeignKey<O, RevokedTokensRecord> parentPath) {
        super(path, childPath, parentPath, REVOKED_TOKENS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RevokedTokensPath extends RevokedTokens implements Path<RevokedTokensRecord> {
        public <O extends Record> RevokedTokensPath(Table<O> path, ForeignKey<O, RevokedTokensRecord> childPath, InverseForeignKey<O, RevokedTokensRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RevokedTokensPath(Name alias, Table<RevokedTokensRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RevokedTokensPath as(String alias) {
            return new RevokedTokensPath(DSL.name(alias), this);
        }

        @Override
        public RevokedTokensPath as(Name alias) {
            return new RevokedTokensPath(alias, this);
        }

        @Override
        public RevokedTokensPath as(Table<?> alias) {
            return new RevokedTokensPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RevokedTokensRecord, Long> getIdentity() {
        return (Identity<RevokedTokensRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RevokedTokensRecord> getPrimaryKey() {
        return Keys.REVOKED_TOKENS_PKEY;
    }

    @Override
    public List<UniqueKey<RevokedTokensRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REVOKED_TOKENS_JTI_IDX);
    }

    @Override
    public List<ForeignKey<RevokedTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVOKED_TOKENS__REVOKED_TOKENS_CREATED_BY_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.REVOKED_TOKENS__REVOKED_TOKENS_CREATED_BY_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public RevokedTokens as(String alias) {
        return new RevokedTokens(DSL.name(alias), this);
    }

    @Override
    public RevokedTokens as(Name alias) {
        return new RevokedTokens(alias, this);
    }

    @Override
    public RevokedTokens as(Table<?> alias) {
        return new RevokedTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RevokedTokens rename(String name) {
        return new RevokedTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RevokedTokens rename(Name name) {
        return new RevokedTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RevokedTokens rename(Table<?> name) {
        return new RevokedTokens(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RevokedTokens where(Condition condition) {
        return new RevokedTokens(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RevokedTokens where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RevokedTokens where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RevokedTokens where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RevokedTokens where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RevokedTokens where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RevokedTokens where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RevokedTokens where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RevokedTokens whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RevokedTokens whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
