plugins {
    id "net.ltgt.errorprone" version "4.1.0" apply false
    id 'org.springframework.boot' version '3.4.0' apply false
    id 'com.diffplug.spotless' version '6.25.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'nu.studer.jooq' version "9.0"
    id 'org.flywaydb.flyway' version "11.0.0"
}

import net.ltgt.gradle.errorprone.CheckSeverity

allprojects {
    task dependenciesForAll(type: DependencyReportTask)

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencyLocking {
        lockFile.set(file("${projectDir}/gradle.lockfile"))
        lockAllConfigurations()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // Spring
        implementation 'org.springframework.boot:spring-boot-starter-jooq'
        implementation 'org.springframework.boot:spring-boot-starter-mail'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.session:spring-session-core'
        implementation 'org.springframework.session:spring-session-jdbc'

        // DB
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.flywaydb:flyway-database-postgresql'
        runtimeOnly 'org.postgresql:postgresql'

        // Generating OpenAPI document
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

        // Logging
        implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

        // UUID
        implementation 'com.fasterxml.uuid:java-uuid-generator:5.1.0'

        // Null safety
        implementation 'org.jspecify:jspecify:1.0.0'
        errorprone "com.uber.nullaway:nullaway:0.12.1"
        errorprone 'com.google.errorprone:error_prone_core:2.35.1'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Testing
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:postgresql'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.uber")
        }
    }

    spotless {
        java {
            googleJavaFormat().formatJavadoc(false)
        }
    }

}

// ----------------------------------------------------------------------------
// Root project

dependencies {
    jooqGenerator 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
}

// compose.yamlと合わせること
def devPostgresUrl = 'jdbc:postgresql://localhost:5432/postgres'
def devPostgresUser = 'postgres'
def devPostgresPassword = ''

// Flyway

flyway {
    url = devPostgresUrl
    user = devPostgresUser
    password = devPostgresPassword
    cleanDisabled = false
    locations = ['classpath:db/migration']
}

// jOOQ

jooq {
    // Springと同じバージョンを使う
    version = dependencyManagement.importedProperties['jooq.version']

    configurations {
        main {
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = devPostgresUrl
                    user = devPostgresUser
                    password = devPostgresPassword
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        excludes = 'flyway_schema_history|spring_session.*'
                    }
                    generate {
                        deprecated = false
                        daos = true
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        springAnnotations = true
                    }
                    target {
                        packageName = 'com.example.demo.jooq'
                        directory = 'jooq/src/main/java'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    launcher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
